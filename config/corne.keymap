/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&soft_off { hold-time-ms = <200>; };

/ {
    macros {
        mcr_arr_fn: macro_arrow_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT &kp SPACE &kp LEFT_BRACE &kp RET>;
            label = "MACRO_ARROW_FN";
        };

        mcr_comma_space_cyr: mcr_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
            label = "MCR_COMMA_SPACE";
        };

        mcr_dot_space_cyr: mcr_dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp AMPERSAND &kp SPACE &skl LEFT_SHIFT>;
            label = "MCR_DOT_SPACE";
        };

        mcr_ctrl_c: ctrl_c {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>;
            label = "CTRL_C";
        };

        mcr_ctrl_v: ctrl_v {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>;
            label = "CTRL_V";
        };

        mcr_switch_language: switch_language {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "SWITCH_LANGUAGE";
        };

        mcr_ctrl_z: mcr_ctrl_z {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>;
            label = "MCR_CTRL_Z";
        };

        mcr_ctrl_a: mcr_ctrl_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A)>;
            label = "MCR_CTRL_A";
        };

        mcr_fullsize_window: mcr_fullsize_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(F))>;
            label = "MCR_FULLSIZE_WINDOW";
        };

        mcr_switch_window_right: mcr_switch_window_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT)>;
            label = "MCR_SWITCH_WINDOW_RIGHT";
        };

        mcr_switch_window_left: mcr_switch_window_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT)>;
            label = "MCR_SWITCH_WINDOW_LEFT";
        };

        mcr_view_all_windows: mcr_view_all_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(UP_ARROW)>;
            label = "MCR_VIEW_ALL_WINDOWS";
        };

        mcr_screenshot: mcr_screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(NUMBER_4))>;
            label = "MCR_SCREENSHOT";
        };

        mcr_video: mcr_video {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(N5))>;
            label = "MCR_VIDEO";
        };

        arr_func_rust: arr_func_rust {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT &kp SPACE>;
            label = "ARR_FUNC_RUST";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <16 15>;
        };

        softoff {
            bindings = <&soft_off>;
            key-positions = <36 25>;
        };

        single_quote_combo {
            bindings = <&td_quotes>;
            key-positions = <6 18>;
        };

        right_esc {
            bindings = <&kp ESC>;
            key-positions = <20 19>;
        };

        caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <2 3 4>;
        };

        switch_language {
            bindings = <&mcr_switch_language>;
            key-positions = <38 39>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 14>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 9>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <3 15>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <8 20>;
        };

        lapr {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 16>;
        };

        rapr {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 19>;
        };

        eaqual {
            bindings = <&td_equal__>;
            key-positions = <5 17>;
        };

        tilda_grave {
            bindings = <&td_tilda_grave>;
            key-positions = <1 13>;
        };
    };

    behaviors {
        td_star_hash: td_star_hash {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_STAR_HASH";
            #binding-cells = <0>;
            bindings = <&kp ASTERISK>, <&kp HASH>;

            tapping-term-ms = <260>;
        };

        skl: sticky_key_long_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_LONG_RELEASE";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            ignore-modifiers;
            quick-release;
        };

        td_quotes: td_quotes {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QUOTES";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        td_tilda_grave: td_tilda_grave {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TILDA_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };

        td_plus_minus: td_plus_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PLUS_MINUS";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp MINUS>;
        };

        td_equal__: td_equal__ {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_EQUAL__";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp UNDERSCORE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E     &kp R        &kp T                 &kp Y          &kp U        &kp I                      &kp O    &kp P     &none
&none  &kp A  &kp S  &kp D     &kp F        &kp G                 &kp H          &kp J        &kp K                      &kp L    &kp SEMI  &none
&none  &kp Z  &kp X  &kp C     &kp V        &kp B                 &kp N          &kp M        &kp COMMA                  &kp DOT  &kp FSLH  &none
                     &kp LGUI  &lt 1 SPACE  &mt LEFT_SHIFT TAB    &kp BACKSPACE  &lt 2 ENTER  &mt LEFT_CONTROL LEFT_ALT
            >;
        };

        num_char_layer {
            bindings = <
&none   &kp NUMBER_1  &kp NUMBER_2     &kp N3       &kp NUMBER_4    &kp N5           &kp N6         &kp N7          &kp N8  &kp N9       &kp N0          &none
&trans  &none         &kp EXCLAMATION  &kp AT_SIGN  &kp UNDERSCORE  &none            &none          &td_plus_minus  &none   &kp DOLLAR   &mcr_arr_fn     &trans
&none   &none         &none            &none        &none           &td_star_hash    &kp AMPERSAND  &none           &none   &kp PERCENT  &arr_func_rust  &none
                                       &trans       &none           &trans           &trans         &none           &trans
            >;
        };

        func_layer {
            bindings = <
&none  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_PREV       &kp C_PLAY_PAUSE      &kp C_NEXT    &none  &none                  &kp UP_ARROW             &none                     &mcr_screenshot  &none
&none  &kp K_MUTE            &kp C_VOLUME_DOWN     &kp C_VOLUME_UP  &mcr_fullsize_window  &kp F12       &none  &kp LEFT_ARROW         &kp DOWN_ARROW           &kp RIGHT_ARROW           &mcr_video       &none
&none  &none                 &none                 &none            &none                 &none         &none  &mcr_view_all_windows  &mcr_switch_window_left  &mcr_switch_window_right  &none            &trans
                                                   &kp GLOBE        &none                 &none         &none  &none
            >;
        };
    };
};
