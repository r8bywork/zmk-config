/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&soft_off { hold-time-ms = <200>; };

/ {
    macros {
        mcr_arr_fn: macro_arrow_fn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT &kp SPACE &kp LEFT_BRACE &kp RET>;
            label = "MACRO_ARROW_FN";
        };

        mcr_comma_space_cyr: mcr_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
            label = "MCR_COMMA_SPACE";
        };

        mcr_dot_space_cyr: mcr_dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp AMPERSAND &kp SPACE &skl LEFT_SHIFT>;
            label = "MCR_DOT_SPACE";
        };

        mcr_ctrl_c: ctrl_c {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(C)>;
            label = "CTRL_C";
        };

        mcr_ctrl_v: ctrl_v {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(V)>;
            label = "CTRL_V";
        };

        mcr_switch_language: switch_language {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "SWITCH_LANGUAGE";
        };

        mcr_ctrl_z: mcr_ctrl_z {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>;
            label = "MCR_CTRL_Z";
        };

        mcr_ctrl_a: mcr_ctrl_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(A)>;
            label = "MCR_CTRL_A";
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <16 15>;
        };

        softoff {
            bindings = <&soft_off>;
            key-positions = <36 25>;
        };

        single_quote_combo {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <6 18>;
        };

        double_quotes_combo {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <7 19>;
        };

        underscope {
            bindings = <&kp UNDERSCORE>;
            key-positions = <4 16>;
        };

        right_esc {
            bindings = <&kp ESC>;
            key-positions = <20 19>;
        };

        caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <2 3 4>;
        };

        switch_language {
            bindings = <&mcr_switch_language>;
            key-positions = <38 39>;
        };
    };

    behaviors {
        td_next_prev_track: td_next_prev_track {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_NEXT_PREV_TRACK";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp F9>, <&kp F7>;
        };

        td_star_hash: td_star_hash {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_STAR_HASH";
            #binding-cells = <0>;
            bindings = <&kp ASTERISK>, <&kp HASH>;

            tapping-term-ms = <260>;
        };

        skl: sticky_key_long_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_LONG_RELEASE";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <5000>;
            ignore-modifiers;
            quick-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E     &kp R        &kp T                 &kp Y          &kp U        &kp I      &kp O    &kp P     &none
&none  &kp A  &kp S  &kp D     &kp F        &kp G                 &kp H          &kp J        &kp K      &kp L    &kp SEMI  &none
&none  &kp Z  &kp X  &kp C     &kp V        &kp B                 &kp N          &kp M        &kp COMMA  &kp DOT  &kp FSLH  &none
                     &kp LGUI  &lt 1 SPACE  &mt LEFT_SHIFT TAB    &kp BACKSPACE  &lt 2 ENTER  &kp RALT
            >;
        };

        num_char_layer {
            bindings = <
&none   &kp MINUS   &kp N1  &kp N2  &kp N3              &kp SLASH        &kp COLON      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp AT_SIGN  &mcr_arr_fn      &none
&trans  &kp PERIOD  &kp N4  &kp N5  &kp N6              &kp N0           &kp CARET      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR   &kp EXCLAMATION  &trans
&none   &kp EQUAL   &kp N7  &kp N8  &kp N9              &td_star_hash    &kp AMPERSAND  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PERCENT  &kp QUESTION     &none
                            &trans  &mcr_dot_space_cyr  &trans           &trans         &mcr_comma_space_cyr  &trans
            >;
        };

        func_layer {
            bindings = <
&none  &none  &none  &none        &none        &none          &none  &none           &kp UP_ARROW    &none            &none  &none
&none  &none  &none  &mcr_ctrl_a  &none        &none          &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none  &none
&none  &none  &none  &mcr_ctrl_z  &mcr_ctrl_c  &mcr_ctrl_v    &none  &none           &none           &none            &none  &trans
                     &trans       &none        &none          &none  &none
            >;
        };
    };
};
